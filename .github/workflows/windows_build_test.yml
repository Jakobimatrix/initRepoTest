name: Windows C/C++ CI

permissions:
  contents: read
  checks: write

on:
  push:
    branches: [ main, dev, master, release ]
  pull_request:
    branches: [ main, dev, master, release ]

jobs:
  setup:
    runs-on: windows-latest
    outputs:
      run_id: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Create workspace archive
        shell: bash
        run: |
          7z a workspace.zip . -xr!.git -xr!.idea -xr!.vscode -xr!*.log
          7z a workspace.zip .git

      - uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: workspace.zip
          retention-days: 1

  build:
    needs: setup
    runs-on: windows-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang, msvc]
        build_type: [debug, release]
        arch: [x86, x64]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
          
      - name: Extract workspace
        shell: bash
        run: 7z x workspace.zip

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.arch == 'x86' && 'MINGW32' || 'MINGW64' }}
          update: true
          install: >-
            base-devel
            git
            p7zip
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-cmake
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-gcc
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-clang
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-ninja

      - name: Build for the cool compilers
        if: matrix.compiler != 'msvc'
        shell: msys2 {0}
        run: |
          source initRepo/.environment
          ./initRepo/scripts/build.sh --${{ matrix.build_type }} -t --compiler ${{ matrix.compiler }} --arch ${{ matrix.arch }} --ninja
          7za a ${{ matrix.compiler }}_${{ matrix.build_type }}_${{ matrix.arch }}_build.zip build-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}

      - name: Setup MSVC
        if: matrix.compiler == 'msvc'
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Build for MSVC
        if: matrix.compiler == 'msvc'
        shell: cmd
        run: |
          rem map BUILD_TYPE to correct flag
          if "%BUILD_TYPE%"=="debug" set FLAG=-d
          if "%BUILD_TYPE%"=="release" set FLAG=-r

          echo Current directory:
          cd
          echo Directory contents:
          dir
          echo Checking if build script exists:
          if exist initRepo\scripts\build.cmd (
              echo Build script found
          ) else (
              echo Build script NOT found
              exit /b 1
          )

          echo Running build script with flags...
          echo Build type flag: %FLAG%
          echo Architecture: %ARCH%
          
          rem Enable command echoing to see what's happening
          echo on
          
          call initRepo\scripts\build.cmd %FLAG% -t --arch %ARCH%
          set BUILD_ERROR=%errorlevel%
          
          echo Build script exited with code: %BUILD_ERROR%
          if %BUILD_ERROR% neq 0 (
              type initRepo\scripts\build.cmd
              echo Full command that was executed:
              echo call initRepo\scripts\build.cmd %FLAG% -t --arch %ARCH%
              exit /b %BUILD_ERROR%
          )
          
          7z a msvc_%BUILD_TYPE%_%ARCH%_build.zip build-msvc-%BUILD_TYPE%-%ARCH%
        env:
          BUILD_TYPE: ${{ matrix.build_type }}
          ARCH: ${{ matrix.arch }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}-build
          path: ${{ matrix.compiler }}_${{ matrix.build_type }}_${{ matrix.arch }}_build.zip
          retention-days: 1

  test:
    needs: build
    if: always()
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang, msvc]
        build_type: [debug, release]
        arch: [x86, x64]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}-build
          path: .

      - name: Setup MSYS2
        if: matrix.compiler != 'msvc'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.arch == 'x86' && 'MINGW32' || 'MINGW64' }}
          update: true
          install: >-
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-gcc
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-clang

      - name: Setup MSVC
        if: matrix.compiler == 'msvc'
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Run Tests
        shell: bash
        run: |
          7z x workspace.zip
          7z x ${{ matrix.compiler }}_${{ matrix.build_type }}_${{ matrix.arch }}_build.zip
          source initRepo/.environment
          ./initRepo/scripts/build.sh -s -T -J --${{ matrix.build_type }} --compiler ${{ matrix.compiler }} --arch ${{ matrix.arch }}

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        with:
          files: build-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}/test_results.xml
          check_name: Test Results (${{ matrix.compiler }}/${{ matrix.build_type }}/${{ matrix.arch }})
          github_token: ${{ secrets.GITHUB_TOKEN }}
