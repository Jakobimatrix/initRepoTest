name: Windows C/C++ CI

permissions:
  contents: read
  checks: write

on:
  push:
    branches: [ main, dev, master, release ]
  pull_request:
    branches: [ main, dev, master, release ]

jobs:
  setup:
    runs-on: windows-latest
    outputs:
      run_id: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Create workspace archive
        shell: bash
        run: |
          7z a workspace.zip . -xr!.git -xr!.idea -xr!.vscode -xr!*.log
          7z a workspace.zip .git

      - uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: workspace.zip
          retention-days: 1

  # ============================================================
  # Normal GCC/Clang builds
  # ============================================================
  build:
    needs: setup
    runs-on: windows-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        build_type: [debug, release]
        arch: [x86, x64]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - name: Extract workspace
        shell: bash
        run: 7z x workspace.zip

      - name: Setup MSYS2 for GCC/Clang
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.arch == 'x86' && 'MINGW32' || 'MINGW64' }}
          update: true
          install: >-
            base-devel
            git
            p7zip
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-cmake
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-gcc
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-clang
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-ninja

      - name: Build for GCC/Clang
        shell: msys2 {0}
        run: |
          source initRepo/.environment
          ./initRepo/scripts/build.sh --${{ matrix.build_type }} -t --compiler ${{ matrix.compiler }} --arch ${{ matrix.arch }} --ninja
          7za a ${{ matrix.compiler }}_${{ matrix.build_type }}_${{ matrix.arch }}_build.zip build-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}-build
          path: ${{ matrix.compiler }}_${{ matrix.build_type }}_${{ matrix.arch }}_build.zip
          retention-days: 1

  # ============================================================
  # MSVC Build
  # ============================================================
  build_msvc:
    needs: setup
    runs-on: windows-latest
    continue-on-error: true
    strategy:
      matrix:
        build_type: [Debug, Release]
        arch: [x86, x64]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - name: Extract workspace
        shell: bash
        run: 7z x workspace.zip

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Configure and Build (MSVC)
        shell: cmd
        run: |
          echo Detecting Visual Studio installation...
          for /f "usebackq tokens=*" %%v in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -requires Microsoft.Component.MSBuild -property installationPath`) do set VS_PATH=%%v
          call "%VS_PATH%\Common7\Tools\VsDevCmd.bat" -arch=${{ matrix.arch }}

          if /I "${{ matrix.arch }}"=="x86" (set CMAKE_ARCH=Win32) else (set CMAKE_ARCH=x64)
          set BUILD_DIR=build-msvc-${{ matrix.build_type }}-${{ matrix.arch }}

          if exist "%BUILD_DIR%" rmdir /s /q "%BUILD_DIR%"
          mkdir "%BUILD_DIR%"
          cd "%BUILD_DIR%"

          echo Running CMake configure...
          cmake -G "Visual Studio 17 2022" -A %CMAKE_ARCH% -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTING=ON ..

          echo Building project...
          cmake --build . --config ${{ matrix.build_type }} -- /m

          cd ..

          7z a "msvc_${{ matrix.build_type }}_${{ matrix.arch }}_build.zip" "%BUILD_DIR%"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: msvc-${{ matrix.build_type }}-${{ matrix.arch }}-build
          path: msvc_${{ matrix.build_type }}_${{ matrix.arch }}_build.zip
          retention-days: 1

  # ============================================================
  # Test for GCC/Clang
  # ============================================================
  test:
    needs: build
    if: always()
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        build_type: [debug, release]
        arch: [x86, x64]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}-build
          path: .

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.arch == 'x86' && 'MINGW32' || 'MINGW64' }}
          update: false
          install: >-
            base-devel
            git
            p7zip
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-cmake
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-gcc
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-clang
            mingw-w64-${{ matrix.arch == 'x86' && 'i686' || 'x86_64' }}-ninja

      - name: Run Tests
        shell: msys2 {0}
        run: |
          7za x workspace.zip
          7za x ${{ matrix.compiler }}_${{ matrix.build_type }}_${{ matrix.arch }}_build.zip
          source initRepo/.environment
          ./initRepo/scripts/build.sh -s -T -J --${{ matrix.build_type }} --compiler ${{ matrix.compiler }} --arch ${{ matrix.arch }}

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action/windows/bash@v2
        with:
          files: build-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.arch }}/test_results.xml
          check_name: Test Results (${{ matrix.compiler }}/${{ matrix.build_type }}/${{ matrix.arch }})
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================
  # MSVC Test
  # ============================================================
  test_msvc:
    needs: build_msvc
    if: always()
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
        arch: [x86, x64]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - uses: actions/download-artifact@v4
        with:
          name: msvc-${{ matrix.build_type }}-${{ matrix.arch }}-build
          path: .

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Run MSVC Tests
        shell: cmd
        run: |
          for /f "usebackq tokens=*" %%v in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -requires Microsoft.Component.MSBuild -property installationPath`) do set VS_PATH=%%v
          call "%VS_PATH%\Common7\Tools\VsDevCmd.bat" -arch=${{ matrix.arch }}

          if /I "${{ matrix.arch }}"=="x86" (set CMAKE_ARCH=Win32) else (set CMAKE_ARCH=x64)
          set BUILD_DIR=build-msvc-${{ matrix.build_type }}-${{ matrix.arch }}
          7z x workspace.zip
          7z x msvc_${{ matrix.build_type }}_${{ matrix.arch }}_build.zip

          cd "%BUILD_DIR%"
          ctest --output-on-failure --output-junit test_results.xml

      - name: Publish MSVC test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action/windows/bash@v2
        with:
          files: build-msvc-${{ matrix.build_type }}-${{ matrix.arch }}/test_results.xml
          check_name: Test Results (MSVC/${{ matrix.build_type }}/${{ matrix.arch }})
          github_token: ${{ secrets.GITHUB_TOKEN }}
